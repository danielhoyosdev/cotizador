{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Resultado.js","componentes/Resumen.js","componentes/App.js","helper.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","title","Formulario","marcaRef","React","createRef","yearRef","planBasicoRef","planCompletoRef","formCotizarSeguro","e","preventDefault","tipoPlan","_this","current","checked","infoAuto","marca","value","year","plan","cotizarSeguro","onSubmit","this","name","ref","type","defaultChecked","Component","Resultado","resultado","TransitionGroup","component","CSSTransition","classNames","key","timeout","enter","exit","Resumen","_this$props$datos","datos","Object","keys","length","componentes_Resultado","Fragment","mostrarResultado","App","state","precio","Date","getFullYear","obtenerDiferenciaAnio","modelo","incremento","calcularMarca","obtenerPlan","toFixed","setState","componentes_Header","componentes_Formulario","componentes_Resumen","Boolean","window","location","hostname","match","ReactDOM","render","componentes_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAUeA,EARA,SAAAC,GACX,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OACdH,EAAAC,EAAAC,cAAA,UAAMH,EAAMK,SC2DTC,6MA5DXC,SAAkBC,IAAMC,cACxBC,QAAkBF,IAAMC,cACxBE,cAAkBH,IAAMC,cACxBG,gBAAkBJ,IAAMC,cAGxBI,kBAAoB,SAACC,GACjBA,EAAEC,iBAEF,IAAIC,EAAYC,EAAKN,cAAcO,QAAQC,QAAW,SAAW,WAE3DC,EAAW,CACbC,MAAOJ,EAAKV,SAASW,QAAQI,MAC7BC,KAAMN,EAAKP,QAAQQ,QAAQI,MAC3BE,KAAMR,GAGVC,EAAKjB,MAAMyB,cAAcL,4EAIzB,OACInB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAesB,SAAUC,KAAKd,mBAC1CZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,UAAQyB,KAAK,QAAQC,IAAKF,KAAKpB,UAC3BN,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,aAAd,aACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,WAAd,WACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,YAAd,cAIRrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,UAAQyB,KAAK,OAAOC,IAAKF,KAAKjB,SAC1BT,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,QAAd,QACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,QAAd,QACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,QAAd,QACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,QAAd,QACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,QAAd,QACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,QAAd,QACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,QAAd,QACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,QAAd,QACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,QAAd,QACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,QAAd,QACArB,EAAAC,EAAAC,cAAA,UAAQmB,MAAM,QAAd,UAGRrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SAAO2B,KAAK,QAAQD,IAAKF,KAAKhB,cAAeiB,KAAK,OAAON,MAAM,SAASS,gBAAc,IAF1F,aAGI9B,EAAAC,EAAAC,cAAA,SAAO2B,KAAK,QAAQD,IAAKF,KAAKf,gBAAiBgB,KAAK,OAAON,MAAM,aAHrE,aAMArB,EAAAC,EAAAC,cAAA,UAAQ2B,KAAK,SAAS1B,UAAU,SAAhC,mBAxDS4B,6BCqBVC,mLAlBP,IAAMC,EAAYP,KAAK3B,MAAMkC,UAE7B,OACIjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,qBAEIF,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAiBC,UAAU,OAAOhC,UAAU,aACxCH,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAeC,WAAW,YAAYC,IAAML,EAAYM,QAAS,CAACC,MAAO,IAAKC,KAAM,MAChFzC,EAAAC,EAAAC,cAAA,gBAAS+B,EAAT,OAJZ,cANQF,aC2BTW,6LAxBO,IAAAC,EACgBjB,KAAK3B,MAAM6C,MAAjCxB,EADMuB,EACNvB,MAAOG,EADDoB,EACCpB,KAAMD,EADPqB,EACOrB,KAErB,GAA4C,IAAzCuB,OAAOC,KAAKpB,KAAK3B,MAAM6C,OAAOG,OAC7B,OACI/C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,oBAAWF,EAAAC,EAAAC,cAAA,YAAQkB,IACnBpB,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,YAAQqB,IAClBvB,EAAAC,EAAAC,cAAA,qBAASF,EAAAC,EAAAC,cAAA,YAAQoB,KAGrBtB,EAAAC,EAAAC,cAAC8C,EAAD,CAAWf,UAAYP,KAAK3B,MAAMkC,8CAO9C,OAAOjC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgD,SAAA,SAAKvB,KAAKwB,mBAAV,YArBOnB,iBC+CPoB,6MAzCXC,MAAQ,CACJC,OAAS,EACTT,MAAQ,MAGZpB,cAAgB,SAACoB,GAAU,IACfxB,EAAsBwB,EAAtBxB,MAAOE,EAAesB,EAAftB,KAAMC,EAASqB,EAATrB,KAGjB8B,EAAS,IAGbA,GAA8B,ECvB/B,SAA+B/B,GAClC,OAAO,IAAIgC,MAAOC,cAAgBjC,EDiBNkC,CAAsBlC,GAKX+B,EAAU,IAG7CA,ECtBD,SAAuBI,GAC1B,IAAIC,EAEJ,OAAQD,GACJ,IAAK,UACDC,EAAa,IACjB,MAEA,IAAK,YACDA,EAAa,KACjB,MAEA,IAAK,WACDA,EAAa,KAOvB,OAAOA,EDEQC,CAAcvC,GAASiC,EAGhCA,GCFD,SAAqB9B,GACxB,MAAgB,WAATA,EAAoB,IAAM,IDCnBqC,CAAYrC,GAAQ8B,GAAQQ,QAAQ,GAE9C7C,EAAK8C,SAAS,CACVT,SACAT,mFAKJ,OACI5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAC6D,EAAD,CAAQ3D,MAAM,+BAEdJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAC8D,EAAD,CAAYxC,cAAgBE,KAAKF,gBAEjCxB,EAAAC,EAAAC,cAAC+D,EAAD,CAASrB,MAAOlB,KAAK0B,MAAMR,MAAOX,UAAWP,KAAK0B,MAAMC,kBAnC1DtB,aEEEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxE,EAAAC,EAAAC,cAACuE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e6bf7daf.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = props => {\n    return(\n        <header className='top'>\n            <h1>{ props.title }</h1>\n        </header>\n    );\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Formulario extends Component{\n    // Refs de Formulario\n    marcaRef        = React.createRef();\n    yearRef         = React.createRef();\n    planBasicoRef   = React.createRef();\n    planCompletoRef = React.createRef();\n\n    // Gestión Datos Formulario\n    formCotizarSeguro = (e) => {\n        e.preventDefault();\n\n        let tipoPlan = (this.planBasicoRef.current.checked) ? 'basico' : 'completo';\n\n        const infoAuto = {\n            marca: this.marcaRef.current.value,\n            year: this.yearRef.current.value,\n            plan: tipoPlan\n        }\n\n        this.props.cotizarSeguro(infoAuto);\n    }\n\n    render(){\n        return(\n            <form className=\"cotizar-auto\" onSubmit={this.formCotizarSeguro}>\n                <div className=\"campo\">\n                    <label>Marca:</label>\n                    <select name=\"marca\" ref={this.marcaRef}>\n                        <option value=\"americano\">Americano</option>\n                        <option value=\"europeo\">Europeo</option>\n                        <option value=\"asiatico\">Asiatico</option>\n                    </select>\n                </div>\n\n                <div className=\"campo\">\n                    <label>Año:</label>\n                    <select name=\"year\" ref={this.yearRef}>\n                        <option value=\"2019\">2019</option>\n                        <option value=\"2018\">2018</option>\n                        <option value=\"2017\">2017</option>\n                        <option value=\"2016\">2016</option>\n                        <option value=\"2015\">2015</option>\n                        <option value=\"2014\">2014</option>\n                        <option value=\"2013\">2013</option>\n                        <option value=\"2012\">2012</option>\n                        <option value=\"2011\">2011</option>\n                        <option value=\"2010\">2010</option>\n                        <option value=\"2009\">2009</option>\n                    </select>\n                </div>\n                <div className=\"campo\">\n                    <label>Plan:</label>\n                    <input type=\"radio\" ref={this.planBasicoRef} name=\"plan\" value=\"basico\" defaultChecked/> Básico\n                    <input type=\"radio\" ref={this.planCompletoRef} name=\"plan\" value=\"completo\"/> Completo\n                </div>\n\n                <button type=\"submit\" className=\"boton\">Cotizar</button>\n            </form>\n        );\n    }\n}\n\nexport default Formulario;","import React, { Component } from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nclass Resultado extends Component{\n    render(){\n        const resultado = this.props.resultado;\n\n        return(\n            <div className=\"gran-total\">\n                <h2>\n                    Total: $\n                    <TransitionGroup component=\"span\" className=\"resultado\" >\n                        <CSSTransition classNames=\"resultado\" key={ resultado } timeout={{enter: 500, exit: 500}} >\n                            <span> { resultado } </span>\n                        </CSSTransition>\n                    </TransitionGroup>\n                    US\n                </h2>\n            </div>\n        );\n    }\n}\n\nexport default Resultado;","import React, { Component } from 'react'\n\n// Componentes\nimport Resultado from './Resultado';\n\nclass Resumen extends Component{\n    mostrarResultado(){\n        const { marca, plan, year } = this.props.datos;\n\n        if(Object.keys(this.props.datos).length !== 0){\n            return(\n                <div>\n                    <div className=\"resumen\">\n                        <h2>Resumen de Datos</h2>\n                        <li>Marca: <span>{ marca }</span></li>\n                        <li>Plan: <span>{ plan }</span></li>\n                        <li>Año: <span>{ year }</span></li>\n                    </div>\n\n                    <Resultado resultado={ this.props.resultado } />\n                </div>\n            );\n        }\n    }\n\n    render(){\n        return(<> { this.mostrarResultado() } </>);\n    }\n}\n\nexport default Resumen;","import React, { Component } from \"react\";\n\n// Componentes\nimport Header from \"./Header\";\nimport Formulario from \"./Formulario\";\nimport Resumen from \"./Resumen\";\n\n// Helpers\nimport { obtenerDiferenciaAnio, calcularMarca, obtenerPlan } from '../helper'\n\nclass App extends Component{\n    state = {\n        precio : 0,\n        datos : {}\n    }\n\n    cotizarSeguro = (datos) => {\n        const { marca, year, plan } = datos;\n        const diferenciaAnios = obtenerDiferenciaAnio(year);\n        \n        let precio = 2000;\n\n        // Por cada año que pasa se decrementa el precio del seguro en 3%\n        precio -= ((diferenciaAnios * 3) * precio) / 100;\n\n        // Según tipo de marca se ingrementa el precio del seguro\n        precio = calcularMarca(marca) * precio;\n\n        // Según tipo plan de inclementa el precio del seguro: Básico (20%), Completo (50%)\n        precio = (obtenerPlan(plan) * precio).toFixed(2);\n\n        this.setState({\n            precio,\n            datos\n        })\n    }\n\n    render(){\n        return(         \n            <div className=\"contenedor\">\n                <Header title=\"Cotizador Seguros de Autos\" />\n\n                <div className=\"contenedor-formulario\">\n                    <Formulario cotizarSeguro={ this.cotizarSeguro }/>\n\n                    <Resumen datos={this.state.datos} resultado={this.state.precio}/>\n                </div>\n            </div>  \n        );\n    };\n}\n\nexport default App;\n","export function obtenerDiferenciaAnio(year) {\n    return new Date().getFullYear() - year;\n}\n\nexport function calcularMarca(modelo) {\n    let incremento;\n\n    switch (modelo) {\n        case \"europeo\":\n            incremento = 1.3;\n        break;\n\n        case \"americano\":\n            incremento = 1.15;\n        break;\n\n        case \"asiatico\":\n            incremento = 1.05;\n        break;\n\n        default:\n        break;\n    }\n\n  return incremento;\n}\n\nexport function obtenerPlan(plan) {\n    return plan === \"basico\" ? 1.2 : 1.5;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './componentes/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}